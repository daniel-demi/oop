Dictionary subclass: #EnumDictionary	instanceVariableNames: 'enumClass'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!EnumDictionary methodsFor: 'instance-methods' stamp: 'dd 6/10/2021 12:31'!add: anAssociation	| index |	((anAssociation key) isKindOf: enumClass) ifFalse: [self error: 'this EnumDictionary only accepts ',enumClass,'''s values as keys'].	index := self scanFor: anAssociation key.	(array at: index)		ifNil: [ self atNewIndex: index put: anAssociation ]		ifNotNil: [ :element |	element value: anAssociation value ].	^anAssociation	! !!EnumDictionary methodsFor: 'instance-methods' stamp: 'dd 6/10/2021 11:13'!getEnum	^enumClass.! !!EnumDictionary methodsFor: 'instance-methods' stamp: 'dd 6/10/2021 11:10'!initialize 	enumClass := nil.	^self.! !!EnumDictionary methodsFor: 'instance-methods' stamp: 'dd 6/10/2021 12:30'!setEnum: anEnumClass	(anEnumClass superclass == OOPEnum) ifFalse: [self error: '',anEnumClass, ' is not an Enum'].	(enumClass == nil) ifFalse: [self error: 'the Dictionary''s Enum is already defined with ', enumClass].	enumClass := anEnumClass! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnumDictionary class	instanceVariableNames: ''!!EnumDictionary class methodsFor: 'class-methods' stamp: 'dd 6/10/2021 12:30'!onEnum: anEnumClass	| newDict |	(anEnumClass superclass == OOPEnum ) ifFalse: [self error: anEnumClass, ' is not an Enum'].	newDict := self new.	newDict setEnum: anEnumClass.	^newDict.! !Object subclass: #OOPEnum	instanceVariableNames: 'values lazyInitialization'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPEnum class	instanceVariableNames: 'values lazyInitialization'!!OOPEnum class methodsFor: 'class-methods' stamp: 'dd 6/10/2021 12:25'!addSwitch	| subValues |	subValues := OOPEnum allSubsequences: values currentSubSeq: {}.	subValues do: [:currVals |		| toCompile firstVal |		(currVals size == 0) ifFalse: [			firstVal := (currVals at: 1).			toCompile := 'switch_case_', firstVal, ': ', firstVal, 'Block '.			(currVals size == 1) ifFalse: [				(2 to: (currVals size)) do: [:x |					| nextVal |					nextVal := (currVals at: x).					toCompile := toCompile, 'case_', nextVal, ': ', nextVal, 'Block '.					]				].			(currVals size < values size) ifTrue: [				toCompile := toCompile , 'default: defaultBlock				'.			].			currVals do: [:val |				toCompile := toCompile , '(self class == (self class superclass ',val,' )) ifTrue: [',val,'Block value. ^self].				'.				].			(currVals size < values size) ifTrue: [				toCompile := toCompile, 'defaultBlock value'.			].			self compile: toCompile.		]	] ! !!OOPEnum class methodsFor: 'class-methods' stamp: 'dd 6/8/2021 19:28'!compile: aSourceCode	| superClass codeSelector tempClass |	superClass := self superclass .	(superClass superclass = OOPEnum) ifTrue: [		tempClass := (ClassBuilder new) 		superclass: Object		subclass:  #TMP		instanceVariableNames: ''		classVariableNames:  ''		poolDictionaries:  ''		category: ''.		tempClass compile: aSourceCode notifying: nil.		codeSelector := (tempClass selectors ) at: 1.		(superClass includesSelector: codeSelector) ifFalse: [			tempClass removeSelector: codeSelector.			self error: codeSelector, ' does not override a method from ', superClass			] 		ifTrue: [			tempClass removeSelector: codeSelector.			^self compile: aSourceCode notifying: nil			]		] 	ifFalse: [		^self compile: aSourceCode notifying: nil		].! !!OOPEnum class methodsFor: 'class-methods' stamp: 'dd 6/4/2021 15:38'!new	self error: 'You can''t create an instance of ' , self name.! !!OOPEnum class methodsFor: 'class-methods' stamp: 'dd 6/4/2021 15:56'!subclass: aSubclassName instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategory	self error: 'You must specify ' , aSubclassName , '''s values'.! !!OOPEnum class methodsFor: 'class-methods' stamp: 'dd 6/10/2021 12:17'!subclass: aSubclassName values: valuesArr lazyInitialization: aBoolean initialize: initializeAsString instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName	| newClass newClassClass func |	(self == OOPEnum ) ifFalse: [		self error: self name , ' is final!! It can''t be inherited'	].	newClass := (ClassBuilder new)		superclass: self		subclass: aSubclassName		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: poolDictionaries 		category: aCategoryName.	newClass compile: initializeAsString.	newClassClass := newClass class.	valuesArr do: [:v | newClassClass addInstVarName: v].		newClassClass compile: 'setValuesArr		values := ', valuesArr.	newClass setValuesArr. 	func := 'initVals		'.	valuesArr do: [:v | func := func, v , ':= (ClassBuilder new)			superclass: self 			subclass: #', aSubclassName , '_' , v , '__','			instanceVariableNames:''''			classVariableNames:'''' 			poolDictionaries:''''			category:''',aCategoryName,'''.		' ].	newClassClass compile: func.	newClass initVals.	valuesArr do: [:v | newClassClass compile: v, '		^(',aSubclassName,'_',v,'__ basicNew initialize)'].	newClassClass compile: 'setLazyInitialization		lazyInitialization := ', aBoolean.	newClass setLazyInitialization.	^newClass.! !!OOPEnum class methodsFor: 'help-mothods' stamp: 'dd 6/10/2021 12:03'!allSubsequences: arr currentSubSeq: currSeq	| res tempSeq |	tempSeq := currSeq collect: [:x | x at: 1].	(arr size == 0) ifTrue: [^{tempSeq}].	res := OOPEnum allSubsequences: 	((2 to: (arr size)) collect: [:x | arr at: x]) currentSubSeq: currSeq, {{arr at: 1}}.	res := res, (OOPEnum allSubsequences: ((2 to: (arr size)) collect: [:x | arr at: x]) currentSubSeq: currSeq).	^res.! !OOPEnum subclass: #Bla	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/8/2021 18:52'!kukuTranscript show: 'oopsy' ; cr.! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_GREEN: GREENBlock case_YELLOW: YELLOWBlock default: defaultBlock			(self class == (self class superclass GREEN )) ifTrue: [GREENBlock value. ^self].				(self class == (self class superclass YELLOW )) ifTrue: [YELLOWBlock value. ^self].				defaultBlock value! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_GREEN: GREENBlock default: defaultBlock			(self class == (self class superclass GREEN )) ifTrue: [GREENBlock value. ^self].				defaultBlock value! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_RED: REDBlock case_GREEN: GREENBlock case_YELLOW: YELLOWBlock default: defaultBlock			(self class == (self class superclass RED )) ifTrue: [REDBlock value. ^self].				(self class == (self class superclass GREEN )) ifTrue: [GREENBlock value. ^self].				(self class == (self class superclass YELLOW )) ifTrue: [YELLOWBlock value. ^self].				defaultBlock value! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_RED: REDBlock case_GREEN: GREENBlock default: defaultBlock			(self class == (self class superclass RED )) ifTrue: [REDBlock value. ^self].				(self class == (self class superclass GREEN )) ifTrue: [GREENBlock value. ^self].				defaultBlock value! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_RED: REDBlock case_YELLOW: YELLOWBlock default: defaultBlock			(self class == (self class superclass RED )) ifTrue: [REDBlock value. ^self].				(self class == (self class superclass YELLOW )) ifTrue: [YELLOWBlock value. ^self].				defaultBlock value! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_RED: REDBlock default: defaultBlock			(self class == (self class superclass RED )) ifTrue: [REDBlock value. ^self].				defaultBlock value! !!Bla methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 00:09'!switch_case_YELLOW: YELLOWBlock default: defaultBlock			(self class == (self class superclass YELLOW )) ifTrue: [YELLOWBlock value. ^self].				defaultBlock value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bla class	instanceVariableNames: 'RED GREEN YELLOW'!!Bla class methodsFor: 'as yet unclassified' stamp: 'dd 6/7/2021 19:48'!GREEN		^Bla_GREEN__! !!Bla class methodsFor: 'as yet unclassified' stamp: 'dd 6/7/2021 19:48'!RED		^Bla_RED__! !!Bla class methodsFor: 'as yet unclassified' stamp: 'dd 6/7/2021 19:48'!YELLOW		^Bla_YELLOW__! !!Bla class methodsFor: 'as yet unclassified' stamp: 'dd 6/7/2021 19:48'!initVals		RED:= (ClassBuilder new)			superclass: self 			subclass: #Bla_RED__			instanceVariableNames:''			classVariableNames:'' 			poolDictionaries:''			category:'OOP4'.		GREEN:= (ClassBuilder new)			superclass: self 			subclass: #Bla_GREEN__			instanceVariableNames:''			classVariableNames:'' 			poolDictionaries:''			category:'OOP4'.		YELLOW:= (ClassBuilder new)			superclass: self 			subclass: #Bla_YELLOW__			instanceVariableNames:''			classVariableNames:'' 			poolDictionaries:''			category:'OOP4'.		! !!Bla class methodsFor: 'as yet unclassified' stamp: 'dd 6/7/2021 19:48'!setLazyInitialization		lazyInitialization := True! !!Bla class methodsFor: 'as yet unclassified' stamp: 'dd 6/7/2021 19:48'!setValuesArr		values := #('RED' 'GREEN' 'YELLOW')! !Bla subclass: #'Bla_GREEN__'	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!Bla_GREEN__ methodsFor: 'as yet unclassified' stamp: 'dd 6/8/2021 19:28'!kukuTranscript show: 'daisy' ; cr.! !Bla subclass: #'Bla_RED__'	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!Bla subclass: #'Bla_YELLOW__'	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!OOPEnum subclass: #OOPColor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPColor methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!initialize	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPColor class	instanceVariableNames: 'RED YELLOW GREEN'!!OOPColor class methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!GREEN		^(OOPColor_GREEN__ basicNew initialize)! !!OOPColor class methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!RED		^(OOPColor_RED__ basicNew initialize)! !!OOPColor class methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!YELLOW		^(OOPColor_YELLOW__ basicNew initialize)! !!OOPColor class methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!initVals		RED:= (ClassBuilder new)			superclass: self 			subclass: #OOPColor_RED__			instanceVariableNames:''			classVariableNames:'' 			poolDictionaries:''			category:'OOP4'.		YELLOW:= (ClassBuilder new)			superclass: self 			subclass: #OOPColor_YELLOW__			instanceVariableNames:''			classVariableNames:'' 			poolDictionaries:''			category:'OOP4'.		GREEN:= (ClassBuilder new)			superclass: self 			subclass: #OOPColor_GREEN__			instanceVariableNames:''			classVariableNames:'' 			poolDictionaries:''			category:'OOP4'.		! !!OOPColor class methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!setLazyInitialization		lazyInitialization := True! !!OOPColor class methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:32'!setValuesArr		values := #('RED' 'YELLOW' 'GREEN')! !OOPColor subclass: #'OOPColor_GREEN__'	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPColor_GREEN__ methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:25'!printHello	Transcript show: 'hello from green!!'; cr.! !OOPColor subclass: #'OOPColor_RED__'	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPColor_RED__ methodsFor: 'as yet unclassified' stamp: 'dd 6/10/2021 12:25'!printHello	Transcript show: 'hello from red!!'; cr.! !OOPColor subclass: #'OOPColor_YELLOW__'	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!