TestCase subclass: #EnumDictionaryTests	instanceVariableNames: 'dict1 dict2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4SampleTests'!!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'MG 6/1/2020 17:24'!setUp	"set up the test - create and initialize the instances of EnumDictionary, and create the Enum class"		(Smalltalk hasClassNamed: #OOPColor) ifTrue: [ Smalltalk removeClassNamed: #OOPColor. ].		OOPEnum subclass: #OOPColor 		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: True 		initialize: ('initialize', (String cr), '	^self')		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.		dict1 := EnumDictionary new.	dict1 setEnum: OOPColor.	dict2 := EnumDictionary onEnum: OOPColor.	! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'MG 6/1/2020 17:24'!testAdd	"use add: method"	| red |		red := OOPColor RED.		dict1 add: red->'red'.		dict2 add: red->1.! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'MG 6/1/2020 17:25'!testGetEnum	"check getEnum method"	| enum1 enum2 |	enum1 := dict1 getEnum.	enum2 := dict2 getEnum.		self assert: ( enum1 = OOPColor).	self assert: ( enum2 = OOPColor).! !TestCase subclass: #OOPEnumTests	instanceVariableNames: 'red yellow green'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4SampleTests'!!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'MG 6/15/2020 19:33'!setUp	"set up the test - create Enum class"		(Smalltalk hasClassNamed: #OOPColor) ifTrue: [ Smalltalk removeClassNamed: #OOPColor. ].		(Smalltalk hasClassNamed: #OOPColor_RED__) ifTrue: [ Smalltalk removeClassNamed: #OOPColor_RED__. ].		(Smalltalk hasClassNamed: #OOPColor_YELLOW__) ifTrue: [ Smalltalk removeClassNamed: #OOPColor_YELLOW__. ].		(Smalltalk hasClassNamed: #OOPColor_GREEN__) ifTrue: [ Smalltalk removeClassNamed: #OOPColor_GREEN__. ].		OOPEnum subclass: #OOPColor 		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: true 		initialize: ('initialize', (String cr), '	^self')		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.		"get the enum's values"	red := OOPColor RED.	yellow := OOPColor YELLOW.	green := OOPColor GREEN.			! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'MG 6/1/2020 16:25'!testCompile	"add methods to the enum"	OOPColor compile: 'printHello', (String cr), '	Transcript show: ''hello!!''; cr. '.	OOPColor_RED__ compile: 'printHello', (String cr), '	Transcript show: ''hello from red!!''; cr.'.	OOPColor_GREEN__ compile: 'printHello', (String cr), '	Transcript show: ''hello from green!!''; cr.'.			red printHello.	yellow printHello.	green printHello.		! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'MG 6/11/2020 16:26'!testSwitch	"add switch-case functionality to the enum, and use it"		OOPColor addSwitch.	"should create all of these methods:	 switch_case_RED: case_YELLOW: case_GREEN: 	 switch_case_RED: case_YELLOW: default:	 switch_case_RED: case_GREEN: default:	 switch_case_RED: default:	 switch_case_YELLOW: case_GREEN: default:	 switch_case_YELLOW: default:	 switch_case_GREEN: default:	"		"check the use of some switch-case methods"	red switch_case_RED: [Transcript show: 'red!!'; cr.] 	case_YELLOW: [Transcript show: 'yellow!!'; cr.] 	case_GREEN: [Transcript show: 'green!!'; cr.].		yellow switch_case_GREEN: [Transcript show: 'green!!'; cr.] 	default: [Transcript show: 'yellow!!'; cr.].! !