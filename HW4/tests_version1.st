Object subclass: #AssertError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4SampleTests'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AssertError class	instanceVariableNames: ''!!AssertError class methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 13:15'!assertError: aBlock msg: msg		aBlock ifError: [^0.].	self error: msg.! !TestCase subclass: #EnumDictionaryTests	instanceVariableNames: 'dict1 dict2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4SampleTests'!!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:56'!run	self setUp.	self testAdd.	self testAddErrors.	self testAddTwoDictionaries.	self testGetEnum.	self testSetEnumErrors.! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:51'!setUp	"set up the test - create and initialize the instances of EnumDictionary, and create the Enum class"	OOPEnumTests new setUp.			dict1 := EnumDictionary new.	dict1 setEnum: OOPColor.	dict2 := EnumDictionary onEnum: OOPColor.	! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/12/2021 14:30'!testAdd	"use add: method"	| red |		red := OOPColor RED.		self assert: (red class == OOPColor_RED__).		dict1 add: red->'red'.		dict2 add: red->1.! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:50'!testAddErrors	"use add: method"	| red |		red := OOPColor RED.		self assert: (red class == OOPColor_RED__).		dict1 add: red->'red'.		dict2 add: red->1.			AssertError assertError: [		dict1 add: 1->1.	] msg: 'wrong key type'.	AssertError assertError: [		dict2 add: 1->1.	] msg: 'wrong key type'.		AssertError assertError: [		dict1 add: 1->red.	] msg: 'wrong key type'.	AssertError assertError: [		dict2 add: 1->red.	] msg: 'wrong key type'.	! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 17:16'!testAddTwoDictionaries	"use add: method"	| red1 red2 d1 d2 |		red1 := OOPColor RED.	red2 := OOPAmongUs RED.			self assert: (red1 class == OOPColor_RED__).	self assert: (red2 class == OOPAmongUs_RED__).	d1 := EnumDictionary onEnum: OOPColor.	d2 := EnumDictionary onEnum: OOPAmongUs.		d1 add: red1->0.	d2 add: red2->0.	AssertError assertError: [		d1 add: red2->0.	] msg: 'wrong key type'.	AssertError assertError: [		d2 add: red1->0.	] msg: 'wrong key type'.		! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'MG 6/1/2020 17:25'!testGetEnum	"check getEnum method"	| enum1 enum2 |	enum1 := dict1 getEnum.	enum2 := dict2 getEnum.		self assert: ( enum1 = OOPColor).	self assert: ( enum2 = OOPColor).! !!EnumDictionaryTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:44'!testSetEnumErrors	"check getEnum method"	| dict |	dict := EnumDictionary new.		AssertError assertError: [dict setEnum: String.] msg: 'setEnum didnt throw error'.	dict setEnum: OOPColor.	AssertError assertError: [dict setEnum: OOPColor.] msg: 'setEnum didnt throw error'.		AssertError assertError: [EnumDictionary onEnum: String.] msg: 'setEnum didnt throw error'.	dict := EnumDictionary onEnum: OOPColor.	AssertError assertError: [dict setEnum: OOPColor.] msg: 'setEnum didnt throw error'.	! !TestCase subclass: #OOPEnumTests	instanceVariableNames: 'red yellow green'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4SampleTests'!!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 17:15'!clearColorClasses	(Smalltalk hasClassNamed: #OOPColor) ifTrue: [ Smalltalk removeClassNamed: #OOPColor. ].	(Smalltalk hasClassNamed: #OOPColor_RED__) ifTrue: [ Smalltalk removeClassNamed: #OOPColor_RED__. ].	(Smalltalk hasClassNamed: #OOPColor_YELLOW__) ifTrue: [ Smalltalk removeClassNamed: #OOPColor_YELLOW__. ].	(Smalltalk hasClassNamed: #OOPColor_GREEN__) ifTrue: [ Smalltalk removeClassNamed: #OOPColor_GREEN__. ].		(Smalltalk hasClassNamed: #OOPAmongUs) ifTrue: [ Smalltalk removeClassNamed: #OOPAmongUs. ].	(Smalltalk hasClassNamed: #OOPAmongUs_RED__) ifTrue: [ Smalltalk removeClassNamed: #OOPAmongUs_RED__. ].	(Smalltalk hasClassNamed: #OOPAmongUs_YELLOW__) ifTrue: [ Smalltalk removeClassNamed: #OOPAmongUs_YELLOW__. ].	(Smalltalk hasClassNamed: #OOPAmongUs_GREEN__) ifTrue: [ Smalltalk removeClassNamed: #OOPAmongUs_GREEN__. ].	! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 17:21'!run	self setUp.	self testCompile1.	self testSwitch1.	self testErrors.! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:52'!setUp	"set up the test - create Enum class"		self clearColorClasses.		OOPEnum subclass: #OOPColor 		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: true 		initialize: ('initialize', (String cr), '	^self')		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.	OOPEnum subclass: #OOPAmongUs		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: true 		initialize: ('initialize', (String cr), '	^self')		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.		"get the enum's values"	red := OOPColor RED.	yellow := OOPColor YELLOW.	green := OOPColor GREEN.			! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:18'!testCompile	"add methods to the enum"	OOPColor compile: 'printHello', (String cr), '	Transcript show: ''hello!!''; cr. '.	OOPColor_RED__ compile: 'printHello', (String cr), '	Transcript show: ''hello from red!!''; cr.'.	OOPColor_GREEN__ compile: 'printHello', (String cr), '	Transcript show: ''hello from green!!''; cr.'.		red printHello.	yellow printHello.	green printHello.		! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/12/2021 14:09'!testCompile1	"add methods to the enum"		OOPColor compile: 'getFirstChar', (String cr), '	^$C.'.	OOPColor_RED__ compile: 'getFirstChar', (String cr), '	^$R.'.	OOPColor_YELLOW__ compile: 'getFirstChar', (String cr), '	^$Y.'.	OOPColor_GREEN__ compile: 'getFirstChar', (String cr), '	^$G.'.		self assert: (red getFirstChar = $R).	self assert: (yellow getFirstChar = $Y).	self assert: (green getFirstChar = $G).! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 13:23'!testErrors	AssertError assertError: [		OOPEnum new.	] msg: 'new didnt throw an error'.	AssertError assertError: [		OOPEnum subclass: #OOPS		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.	] msg: 'subclass didnt throw an error'.	! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:19'!testInitialize	"	initializeAsString := 'initialize', 		(String cr), (String tab), 'self assert: (self class RED isNil).',		(String cr), (String tab), '^self.'.		aClass := OOPEnum subclass: #OOPColor 		values: {'RED'. 'YELLOW'. 'GREEN'.} 		lazyInitialization: true 		initialize: initializeAsString		instanceVariableNames: '' 		classVariableNames: '' 		poolDictionaries: '' 		category: 'OOP4'.				inst := aClass basicNew.	inst initialize.	"! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'MG 6/11/2020 16:26'!testSwitch	"add switch-case functionality to the enum, and use it"		OOPColor addSwitch.	"should create all of these methods:	 switch_case_RED: case_YELLOW: case_GREEN: 	 switch_case_RED: case_YELLOW: default:	 switch_case_RED: case_GREEN: default:	 switch_case_RED: default:	 switch_case_YELLOW: case_GREEN: default:	 switch_case_YELLOW: default:	 switch_case_GREEN: default:	"		"check the use of some switch-case methods"	red switch_case_RED: [Transcript show: 'red!!'; cr.] 	case_YELLOW: [Transcript show: 'yellow!!'; cr.] 	case_GREEN: [Transcript show: 'green!!'; cr.].		yellow switch_case_GREEN: [Transcript show: 'green!!'; cr.] 	default: [Transcript show: 'yellow!!'; cr.].! !!OOPEnumTests methodsFor: 'as yet unclassified' stamp: 'AJK 6/15/2021 16:20'!testSwitch1	"add switch-case functionality to the enum, and use it"		| wrong good count |	OOPColor addSwitch.	"should create all of these methods:	 switch_case_RED: case_YELLOW: case_GREEN: 	 switch_case_RED: case_YELLOW: default:	 switch_case_RED: case_GREEN: default:	 switch_case_RED: default:	 switch_case_YELLOW: case_GREEN: default:	 switch_case_YELLOW: default:	 switch_case_GREEN: default:	"		"check the use of some switch-case methods"	count := 0.	good := [count := count + 1.].	wrong := [self error: 'wrong case!!'.].		self assert: (count = 0).		red switch_case_RED: good case_YELLOW: wrong case_GREEN: wrong.	red switch_case_RED: good case_YELLOW: wrong default: wrong.	red switch_case_RED: good case_GREEN: wrong default: wrong.	red switch_case_RED: good default: wrong.		red switch_case_YELLOW: wrong case_GREEN: wrong default: good.	red switch_case_YELLOW: wrong default: good.	red switch_case_GREEN: wrong default: good.		yellow switch_case_RED: wrong case_YELLOW: good case_GREEN: wrong.	yellow switch_case_RED: wrong case_YELLOW: good default: wrong.	yellow switch_case_RED: wrong case_GREEN: wrong default: good.	yellow switch_case_RED: wrong default: good.		yellow switch_case_YELLOW: good case_GREEN: wrong default: wrong.	yellow switch_case_YELLOW: good default: wrong.	yellow switch_case_GREEN: wrong default: good.		green switch_case_RED: wrong case_YELLOW: wrong case_GREEN: good.	green switch_case_RED: wrong case_YELLOW: wrong default: good.	green switch_case_RED: wrong case_GREEN: good default: wrong.	green switch_case_RED: wrong default: good.		green switch_case_YELLOW: wrong case_GREEN: good default: wrong.	green switch_case_YELLOW: wrong default: good.	green switch_case_GREEN: good default: wrong.		self assert: (count = (7 * 3)).! !