Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'getters' stamp: 'TL 4/12/2021 10:37'!coef	^coef.! !!Monom methodsFor: 'getters' stamp: 'TL 4/12/2021 10:37'!exp	^exp.! !!Monom methodsFor: 'general' stamp: 'TL 4/19/2021 10:59'!derivative	|newMonom|	newMonom:= Monom new.	(exp = 0 or: [coef = 0])	ifTrue: [		^newMonom		]	ifFalse: [		newMonom exp: (exp - 1).		newMonom coef: (coef * exp).		^newMonom		]! !!Monom methodsFor: 'printing' stamp: 'TL 4/12/2021 10:48'!print	Transcript show: (coef asString), 'X^', (exp asString); cr.! !!Monom methodsFor: 'auxilary' stamp: 'TL 4/12/2021 12:00'!multiply: aMonom	(aMonom isKindOf: Monom)		ifTrue: [			coef:= coef*(aMonom coef).			exp:= exp+(aMonom exp).			^self			]		ifFalse: [			^self error: 'invalid input'			]! !!Monom methodsFor: 'setters' stamp: 'TL 4/12/2021 10:41'!coef: anInteger	((anInteger isKindOf: Integer))	ifTrue: [		coef:= anInteger.		^self		]	ifFalse:[		^self error: 'invalid input'		]	! !!Monom methodsFor: 'setters' stamp: 'TL 4/12/2021 10:40'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger >= 0])	ifTrue: [		exp:= anInteger.		^self		]	ifFalse:[		^self error: 'invalid input'		]	! !!Monom methodsFor: 'initialize-release' stamp: 'TL 4/12/2021 10:33'!initialize	exp:= 0.	coef:= 0.! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'adding' stamp: 'TL 4/12/2021 11:51'!add: aPolynom	|newPolynom|	newPolynom:= self deepCopy.	(aPolynom isKindOf: Polynom)		ifTrue: [			(aPolynom monoms) do: [:val | |tempMonom|				tempMonom:= Monom new.				tempMonom coef: val.				tempMonom exp: ((aPolynom monoms) keyAtValue: val).								newPolynom addMonom: tempMonom.				].			^newPolynom			]		ifFalse: [			^self error: 'invalid input'			]! !!Polynom methodsFor: 'adding' stamp: 'TL 4/12/2021 11:25'!addMonom: aMonom	((aMonom isKindOf: Monom))		ifTrue: [			(monoms includesKey: (aMonom exp))				ifTrue: [					monoms					at: (aMonom exp)					put: (monoms at: (aMonom exp)) + (aMonom coef).					((monoms at: (aMonom exp)) = 0)						ifTrue: [							monoms removeKey: (aMonom exp).							].					^self					]				ifFalse: [					monoms					at: (aMonom exp)					put: (aMonom coef).					^self					]			]		ifFalse: [			^self error: 'invalid input'			]! !!Polynom methodsFor: 'general' stamp: 'TL 4/12/2021 11:35'!asDictionary	^monoms.! !!Polynom methodsFor: 'general' stamp: 'TL 4/19/2021 11:59'!derivative	|derPolynom tempPoly|	tempPoly := Polynom new.	tempPoly := self deepCopy.	derPolynom := Polynom new.	tempPoly monoms do: [:val | |tempMonom|				tempMonom:= Monom new.				tempMonom coef: val.				tempMonom exp: (tempPoly monoms keyAtValue: val).				tempPoly monoms removeKey: (tempPoly monoms keyAtValue: val).				derPolynom addMonom: (tempMonom derivative).				].	^derPolynom.! !!Polynom methodsFor: 'general' stamp: 'TL 4/12/2021 15:47'!eval: anInteger	|evaluation|	evaluation:=0.	(anInteger isKindOf: Integer)		ifTrue: [			monoms do: [:val | |tempMonom|				tempMonom:= Monom new.				tempMonom coef: val.				tempMonom exp: (monoms keyAtValue: val).				evaluation:= evaluation+ ((anInteger raisedTo: (tempMonom exp))*(tempMonom coef)).				].			^evaluation.			]		ifFalse: [			^self error: 'invalid input'			]! !!Polynom methodsFor: 'general' stamp: 'TL 4/12/2021 15:36'!multiplyByMonom: aMonom	|tempPolynom|	tempPolynom:= Polynom new.	(aMonom isKindOf: Monom)		ifTrue: [			|origKeys|			origKeys:= monoms keys.			monoms do: [:val | |tempMonom|				tempMonom:= Monom new.				tempMonom coef: val.				tempMonom exp: (monoms keyAtValue: val).				tempMonom multiply: aMonom.					tempPolynom addMonom: tempMonom.				].			origKeys do: [:k | monoms removeKey: k].			(tempPolynom monoms) do: [:val | |tempMonom|				tempMonom:= Monom new.				tempMonom coef: val.				tempMonom exp: ((tempPolynom monoms) keyAtValue: val).				self addMonom: tempMonom.				].			^self			]		ifFalse: [			^self error: 'invalid input'			]! !!Polynom methodsFor: 'printing' stamp: 'TL 4/12/2021 11:31'!print	Transcript show: ' ' ; cr.	monoms do: [:val | Transcript show: (val asString), 'X^', ((monoms keyAtValue: val) asString), '+'].! !!Polynom methodsFor: 'ouxilary' stamp: 'TL 4/12/2021 11:16'!monoms	^monoms.! !!Polynom methodsFor: 'initialize-release' stamp: 'TL 4/12/2021 11:01'!initialize	monoms:= Dictionary new.! !				Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'getters' stamp: 'DD 4/10/2021 15:49'!block	^block.! !!PolyStream methodsFor: 'getters' stamp: 'DD 4/15/2021 21:55'!inner: aBlock with: x and: y	aBlock value: x value: y.! !!PolyStream methodsFor: 'Polynome-actions' stamp: 'DD 4/15/2021 22:03'!add: aPolyStream	| temp |	(aPolyStream isKindOf: PolyStream ) 		ifFalse: [^self error: 'invalid input'].	temp := block.	block := [:x :filterSet |		| res1 res2 |		res1 := temp value: x value: filterSet.		res2 := (aPolyStream block) value: x value: filterSet.		(res1 + res2).		]! !!PolyStream methodsFor: 'Polynome-actions' stamp: 'DD 4/18/2021 22:22'!addCoef: coef withExp: exp	| temp |	temp := block.	((coef isKindOf: Integer) and: (exp isKindOf: Integer ) and: (exp > 0))		ifFalse: [^self error: 'invalid input'].	block := [:x :filterSet | 		| blockres monom |		blockres := temp value: x value: filterSet.		monom := 0.		(filterSet includes: exp)			ifFalse:	[monom := (coef * (x raisedTo: exp))].		(blockres + monom).		]! !!PolyStream methodsFor: 'Polynome-actions' stamp: 'DD 4/15/2021 20:54'!eval: anInteger	(anInteger isKindOf: Integer) ifFalse: [^self error: 'invalid input'].	^(block value: anInteger value: (Set new)).! !!PolyStream methodsFor: 'Polynome-actions' stamp: 'DD 4/15/2021 22:47'!filter: aSet	| temp  newSet |	temp := block.	newSet := aSet copyWithout: {}.	block := [:x :filterSet|		filterSet do: [:item | newSet add: item].		(temp value: x value: newSet).		].! !!PolyStream methodsFor: 'Polynome-actions' stamp: 'DD 4/15/2021 22:03'!multiplyBy: anInteger	| temp |	(anInteger isKindOf: Integer ) ifFalse: [^self error: 'invalid input'].	temp := block.	block := [:x :y | 		(anInteger * (temp value: x value: y))		].! !!PolyStream methodsFor: 'Polynome-actions' stamp: 'DD 4/15/2021 22:03'!substitute: anInteger	| temp |	((anInteger isKindOf: Integer) and: ((anInteger = 0) not)) ifFalse: [^self error: 'invalid input'].	temp  := block.	block := [:x :y|		(temp value: (anInteger * x) value: y)		].! !!PolyStream methodsFor: 'initialize-release' stamp: 'DD 4/15/2021 20:55'!initialize 	block := [:x :y | 0].		! !